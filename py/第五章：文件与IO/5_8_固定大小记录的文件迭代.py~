#########################################################################
# File Name: 5_8_固定大小记录的文件迭代.py
# Author: Crow
# mail:qnglsk@163.com
# Created Time: 2020年02月21日 星期五 11时18分28秒
#########################################################################
#!/usr/bin/env python3

# 在一个 固定长度记录 或者 数据块的 集合上迭代， 而不是在一个文件中一行一行的迭代。

# 解决方案
# 小技巧： iter 和 functools.partial() 函数
from functools import partial
RECORD_SIZE = 32
with open('somefile.data','rb') as f:
    records = iter(partial(f.read,RECORD_SIZE),b'')
    for r in records:
        print(r)

# 梨子中 records 对象是一个可迭代对象，会不断的产生 固定大小的数据块，直到文件末尾。
# 注意 如果总记录大小不是块 大小的整数倍的话，最后一个返回元素的字节数会比期望值少。


# iter() 函数 鲜为人知 的特性： 如果给它传递一个 可调用对象 和 一个标记值，
# 它会创建一个迭代器。 迭代器会 一直调用传入的可调用对象直到它返回标记值为止，迭代终止。

# 例子中 functools.partial 用来创建一个每次被调用时从文件中读取固定数目字节的可调用对象。
# 标记值b'' 就是当到达文件结尾时的返回值。

# 例子中文件是以 二进制模式 打开的，
# 如果读取固定大小的记录，这通常是普遍情况。
# 对于文本文件，一行一行的读取（默认的迭代行为） 更普遍点。
